PROVIDER CODE REVIEW:

Design critique:

Overall the design of the provided code wasn't too bad. It was actually pretty close to how ours worked. Transforms act on shapes, model contains transforms, view renders new
shapes. In a way, they had a more true implementation of the MVC model then we had because our controller basically just passed a read-only model off to the view and called it a day
with no back and forth interaction between the model, view and controller as the provided code has. It looks like it'd be pretty easy to add on new transform types too with the
generality of the interface making it pretty flexible. That said, there was one big issue that really stuck out to us. The Interactive
view itself required a controller be passed to it to run. This to us struck us as a very odd choice. Instead of the controller calling view methods when view buttons were pushed,
the view called controller methods. This more tightly coupled their view and controller than we thought necessary.

Implementation critique:

We didn't really have too many complaints with the implementation in terms of functionality save for one issue with the interactive view's SVG export. We ran into an issue where
exporting the view while the animation was playing would result in the export beginning whenever the export took place. For example, if you exported halfway through the animation,
then the SVG would begin halfway through the animation as well.

We also needed to request more interfaces for their shapes and colors because they were
bespoke when we initially received them and we couldn't really do much to figure out what we needed. Our providers did respond within a few days though with an updated version.

With regards to code cleanliness, we did see quite a bit of redundancy in the SVGView when appending the transformation information that could have been made into an internal
helper function. But all the other classes were pretty well organized and abstraction really helped to cut down on potential redundancies.

Other than that, the implementations worked as advertised and were pretty easy to get working. They even had key bindings, which we lacked.


Documentation critique:

In terms of documentation there were some issues. Generally speaking we could figure out what pieces fit where but there were a few "to do" markers left in some of the interfaces
(these were cleaned up at our request). Fortunately, their method names were explicit enough where we could take a pretty good guess as to what they were intended for. Also, a more
explicit relationship between the IAnimShape and IShape would have been nice. An IAnimShape turned out to be wrapper around an IShape that added on a lot of the animation specific
information (like color, and position) but this wrapper relationship was only ever expressed in the getShape() method. Similarly, it wasn't entirely clear how we were expected to
run the visual and interactive views on a tick by tick basis. We eventually figured it out by backtracking through the implements lists until we determined that we could use the
ARunnableView's update method. But it took us a while to figure it out.


Design / Code Limitations:

One thing that this design can't really handle too well is changes to its core shapes. The interfaces are pretty explicit in that they only can call for certain types of parameters.
If we wanted to add an "orientation" value (to make things rotate) then there would need to be an entirely new interfaces made that could call for these new parameters. We'd recommend
possibly generalizing the parameter list further with a getParameter(string parameterName) method or something similar. Otherwise things are pretty flexible. It'd be easy to make new
transform types and views are also set up pretty well so it'd be easy to make new ones.


Conclusion:

The code we received worked pretty well, all things considered. There were some issues but the only one we found to be glaring was the calling of controller methods within the interactive
view. In this case, it forced us to extend our own controller in order to supply the methods necessary to run the view instead of being able to call view methods within our own controller.
Past that, it was simple requests to create a few new interfaces and a bit of incomplete documentation. But overall the design was flexible, readable and easy to work with.